#
# L1J Server 启动设定档
#

# 使用 Server 模式, 具有教好的记忆体控制效能
-server

# 时区设置, 避免 JVM 抓取到错误的时区
-Duser.timezone=Etc/GMT+8

# 伺服器最大及最小记忆体使用量, 建议设定为相同
-Xmx1024m
-Xms1024m

# Young Generation 大小, 建议为记忆体总量的 3/8
-Xmn384m

# 每个执行绪初始使用的记忆体大小
-Xss128k

# 静态区大小, 主要跟所有 class 大小有关
-XX:MaxPermSize=32m

# 分页档使用大小 (启动后出现无法锁定的错误, 原因不明)
#-XX:+UseLargePages
#-XX:LargePageSizeInBytes=16

# 停用 System.gc()
-XX:+DisableExplicitGC

# GC 优先 而后使用 Full GC
-XX:+ScavengeBeforeFullGC

# 对 GC 使用并行收集
-XX:+UseParNewGC
-XX:+CMSParallelRemarkEnabled

# 对 GC 并行收集时所使用的执行绪数量
-XX:ParallelGCThreads=2

# Young Generation 子分区比率
-XX:SurvivorRatio=6
-XX:MaxTenuringThreshold=8

# 对 Full GC 使用并发收集
-XX:+UseConcMarkSweepGC

# Full GC 后进行碎片整理
-XX:+UseCMSCompactAtFullCollection
-XX:CMSFullGCsBeforeCompaction=10

# Old Generation 达到此百分比, 就开始执行 CMS
-XX:CMSInitiatingOccupancyFraction=85

# 快速参照方法 (get, set 直接取得物件, 而不透过方法回传)
-XX:+UseFastAccessorMethods

# Soft Reference(软参考) 最后一次使用后的存活时间
-XX:SoftRefLRUPolicyMSPerMB=0

# 不回收载入的类别
-Xnoclassgc

# 输出 GC 相关讯息
-XX:+PrintGCDetails
-Xloggc:log\gc.log
