#ifndef TCONFIG_H
#define TCONFIG_H
#include <string>

class TConfig
{
public:
  TConfig();
  virtual ~TConfig();
  void load();
protected:
  void ClientLanguageCodeLoad();
  void Validate();
public:
  bool CHECK_LOCK;
  bool PACKETS;
  bool BUG_BEAR_RACE;
  bool DEBUG;
  bool PACKET;
  int THREAD_P_EFFECTS;
  int THREAD_P_GENERAL;
  int AI_MAX_THREAD;
  int THREAD_P_TYPE_GENERAL;
  int THREAD_P_SIZE_GENERAL;
  std::string GAME_SERVER_HOST_NAME;
  int GAME_SERVER_PORT;
  std::string TIME_ZONE;
  int CLIENT_LANGUAGE;
  std::string CLIENT_LANGUAGE_CODE;
  bool HOSTNAME_LOOKUPS;
  int AUTOMATIC_KICK;
  bool AUTO_CREATE_ACCOUNTS;
  int MAX_ONLINE_USERS;
  bool CACHE_MAP_FILES;
  bool LOAD_V2_MAP_FILES;
  bool CHECK_MOVE_INTERVAL;
  bool CHECK_ATTACK_INTERVAL;
  bool CHECK_SPELL_INTERVAL;
  int INJUSTICE_COUNT;
  int JUSTICE_COUNT;
  int CHECK_STRICTNESS;
  int ILLEGAL_SPEEDUP_PUNISHMENT;
  int AUTOSAVE_INTERVAL;
  int AUTOSAVE_INTERVAL_INVENTORY;
  int SKILLTIMER_IMPLTYPE;
  int NPCAI_IMPLTYPE;
  bool TELNET_SERVER;
  int TELNET_SERVER_PORT;
  int PC_RECOGNIZE_RANGE;
  bool CHARACTER_CONFIG_IN_SERVER_SIDE;
  bool ALLOW_2PC;
  int LEVEL_DOWN_RANGE;
  bool SEND_PACKET_BEFORE_TELEPORT;
  bool CMD_ACTIVE;
  int Announcements_Cycle_Time;
  bool Announcements_Cycle_Modify_Time;
  /*std::string DB_DRIVER;
  std::string DB_URL;
  std::string DB_LOGIN;
  std::string DB_PASSWORD;
  bool DETECT_DB_RESOURCE_LEAKS;*/
  std::string DB_CONN;
  int MYSQL_AUTO_BACKUP;
  bool COMPRESS_G_ZIP;
  double RATE_XP;
  double RATE_LA;
  double RATE_KARMA;
  double RATE_DROP_ADENA;
  double RATE_DROP_ITEMS;
  int ENCHANT_CHANCE_WEAPON;
  int ENCHANT_CHANCE_ARMOR;
  int ATTR_ENCHANT_CHANCE;
  double RATE_WEIGHT_LIMIT;
  double RATE_WEIGHT_LIMIT_PET;
  double RATE_SHOP_SELLING_PRICE;
  double RATE_SHOP_PURCHASING_PRICE;
  int CREATE_CHANCE_DIARY;
  int CREATE_CHANCE_RECOLLECTION;
  int CREATE_CHANCE_MYSTERIOUS;
  int CREATE_CHANCE_PROCESSING;
  int CREATE_CHANCE_PROCESSING_DIAMOND;
  int CREATE_CHANCE_DANTES;
  int CREATE_CHANCE_ANCIENT_AMULET;
  int CREATE_CHANCE_HISTORY_BOOK;
  int MAGIC_STONE_TYPE;
  int MAGIC_STONE_LEVEL;
  int GLOBAL_CHAT_LEVEL;
  int WHISPER_CHAT_LEVEL;
  int AUTO_LOOT;
  int LOOTING_RANGE;
  bool ALT_NONPVP;
  bool ALT_ATKMSG;
  bool CHANGE_TITLE_BY_ONESELF;
  int MAX_CLAN_MEMBER;
  bool CLAN_ALLIANCE;
  int MAX_PT;
  int MAX_CHAT_PT;
  bool SIM_WAR_PENALTY;
  bool GET_BACK;
  std::string ALT_ITEM_DELETION_TYPE;
  int ALT_ITEM_DELETION_TIME;
  int ALT_ITEM_DELETION_RANGE;
  bool ALT_GMSHOP;
  int ALT_GMSHOP_MIN_ID;
  int ALT_GMSHOP_MAX_ID;
  bool ALT_HALLOWEENIVENT;
  bool ALT_JPPRIVILEGED;
  bool ALT_TALKINGSCROLLQUEST;
  bool ALT_WHO_COMMAND;
  bool ALT_REVIVAL_POTION;
  int ALT_WAR_TIME;
  int ALT_WAR_TIME_UNIT;
  int ALT_WAR_INTERVAL;
  int ALT_WAR_INTERVAL_UNIT;
  int ALT_RATE_OF_DUTY;
  bool SPAWN_HOME_POINT;
  int SPAWN_HOME_POINT_RANGE;
  int SPAWN_HOME_POINT_COUNT;
  int SPAWN_HOME_POINT_DELAY;
  bool INIT_BOSS_SPAWN;
  int ELEMENTAL_STONE_AMOUNT;
  int HOUSE_TAX_INTERVAL;
  int MAX_DOLL_COUNT;
  bool RETURN_TO_NATURE;
  int MAX_NPC_ITEM;
  int MAX_PERSONAL_WAREHOUSE_ITEM;
  int MAX_CLAN_WAREHOUSE_ITEM;
  bool DELETE_CHARACTER_AFTER_7DAYS;
  int NPC_DELETION_TIME;
  int DEFAULT_CHARACTER_SLOT;
  int GDROPITEM_TIME;
  int PRINCE_MAX_HP;
  int PRINCE_MAX_MP;
  int KNIGHT_MAX_HP;
  int KNIGHT_MAX_MP;
  int ELF_MAX_HP;
  int ELF_MAX_MP;
  int WIZARD_MAX_HP;
  int WIZARD_MAX_MP;
  int DARKELF_MAX_HP;
  int DARKELF_MAX_MP;
  int DRAGONKNIGHT_MAX_HP;
  int DRAGONKNIGHT_MAX_MP;
  int ILLUSIONIST_MAX_HP;
  int ILLUSIONIST_MAX_MP;
  int LV50_EXP;
  int LV51_EXP;
  int LV52_EXP;
  int LV53_EXP;
  int LV54_EXP;
  int LV55_EXP;
  int LV56_EXP;
  int LV57_EXP;
  int LV58_EXP;
  int LV59_EXP;
  int LV60_EXP;
  int LV61_EXP;
  int LV62_EXP;
  int LV63_EXP;
  int LV64_EXP;
  int LV65_EXP;
  int LV66_EXP;
  int LV67_EXP;
  int LV68_EXP;
  int LV69_EXP;
  int LV70_EXP;
  int LV71_EXP;
  int LV72_EXP;
  int LV73_EXP;
  int LV74_EXP;
  int LV75_EXP;
  int LV76_EXP;
  int LV77_EXP;
  int LV78_EXP;
  int LV79_EXP;
  int LV80_EXP;
  int LV81_EXP;
  int LV82_EXP;
  int LV83_EXP;
  int LV84_EXP;
  int LV85_EXP;
  int LV86_EXP;
  int LV87_EXP;
  int LV88_EXP;
  int LV89_EXP;
  int LV90_EXP;
  int LV91_EXP;
  int LV92_EXP;
  int LV93_EXP;
  int LV94_EXP;
  int LV95_EXP;
  int LV96_EXP;
  int LV97_EXP;
  int LV98_EXP;
  int LV99_EXP;
  int LV100_EXP;
  int LV101_EXP;
  int LV102_EXP;
  int LV103_EXP;
  int LV104_EXP;
  int LV105_EXP;
  int LV106_EXP;
  int LV107_EXP;
  int LV108_EXP;
  int LV109_EXP;
  int LV110_EXP;
  bool FIGHT_IS_ACTIVE;
  bool NOVICE_PROTECTION_IS_ACTIVE;
  int NOVICE_MAX_LEVEL;
  int NOVICE_PROTECTION_LEVEL_RANGE0;
  int LOGGING_WEAPON_ENCHANT;
  int LOGGING_ARMOR_ENCHANT;
  bool LOGGING_CHAT_NORMAL;
  bool LOGGING_CHAT_WHISPER;
  bool LOGGING_CHAT_SHOUT;
  bool LOGGING_CHAT_WORLD;
  bool LOGGING_CHAT_CLAN;
  bool LOGGING_CHAT_PARTY;
  bool LOGGING_CHAT_COMBINED;
  bool LOGGING_CHAT_CHAT_PARTY;
  bool writeTradeLog;
  bool writeRobotsLog;
  bool writeDropLog;
  bool NEW_CREATE_ROLE_SET_GM;
  bool SHOW_NPC_ID;
  bool LV_UP_HP_MP_FULL;
  int REST_TIME;
  bool HOURLY_CHIME;
  const int MANA_DRAIN_LIMIT_PER_NPC;
  const int MANA_DRAIN_LIMIT_PER_SOM_ATTACK;
private:
  static const std::string LANGUAGE_CODE_ARRAY[];
    /** 服务器配置文件路径. */
  static std::string SERVER;
  /** 数据库配置文件路径. */
  static std::string SQL;
  /** 倍率配置文件路径. */
  static std::string RATES;
  /** 进阶配置文件路径. */
  static std::string ALT;
  /** 角色配置文件路径. */
  static std::string CHAR;
  /** 战斗特化配置文件路径. */
  static std::string FIGHT;
  /** 纪录配置文件路径. */
  static std::string RECORD;
  /** 其他配置文件路径. */
  static std::string OTHER;
  /** 调整测试配置文件路径. */
  static std::string CHECK;
};

#endif // TCONFIG_H
